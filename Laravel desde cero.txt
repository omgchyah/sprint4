Laravel desde cero

1.composer global require laravel/installer

laravel new 'project name'

Starter kit? none

Testing? Pest

Repository? Yes

SQLite? Yes

Desde la carpeta public/index.php

2. Para crear una ruta más rápido

C:/Windows/System32/drivers/etc

abrir archivo hosts

127.0.0.1 blog.test

Guardar cambios

abrir file xampp/apache/config/extra/http-vhosts

Usar y copiar la plantilla
Eliminar error log, customlog
Quitar los ## comentarios

servername blog.test
Document Root "C:/xampp/htdocs/.../proyecto"

Crear uno para el dashboard
servername localhost
Document Root "C:/xampp/htdocs"

Reiniciar Xampp

3. Rutas

URI es todo lo que va después del dominio '/'
Routes está dentro de la carpeta routes/web.php

Crear ruta nueva:

Route::get('/ruta', function(){
	return "Vista del contenido";
})

//Get las que hacemos cuando escribimos una URL o hacemos click sobre un enlace


No solo deficinir la URI sino el tipo de peticion

En vez de trabar con rutas, trabajamos con parámetros que son variables

//parámetros son contenido variables
Route::get('/posts/{post}', function($post){
    return "Aquí se mostrará el post {$post}";
});

Se puede pasar más de un parámetro

El orden de las rutas es importante

4. Controladores
Contienen la lógica

Se llama artisan el comando:

php artisan make::controller 'Nombre'Controller ej. HomController

Luego en la ruta se llama al controlador y método

Route::get('/', [HomeController::class, 'index']);

Hacer click más ctrl sobre el nombre del controlador para ir al archivo

Cuando un controlador tiene un solo metodo le damos un nombre como  __invoke en vez de index

Se puede pasar solo el cotrolador sinm el metodo

5. Vistas

Documentos php en resource/views
Creamos una página php
Y luego desde el controlador llamamos al helper view()

Ej: view('home')

Laravel sabe que estamos trabajando en una vista por el .blade.php

Directivas de blade
@php
@foreach
@endforeach

6. componentes

Un componente se define una sola vez y se llama
Para crear un componente se crea una carpeta views/components
Creamos nuestro archivo y luego lo llamamos

<x-'nombre del archivo sin incluir'>

SIEMPRE CERRARLO

pARA HACERLO VARIABLE, crear una variable $slot dentro de nuestro compenente {{ $slot }}

Y llamarlo dentro de nuestro <x-'componente'>

7. PLANTILLAS

Crear un component y crear la estructura repetitiva

Se usa componentes normalmente, pero también se pueden usar plantillas usando el método @yield y @section
@stack es para contenido variable y se llamas a @push


8. Conectar a base datos

en la carpeta config/database.php nos conectamos con la base de datos

'default' => env('DB_CONNECTION', 'sqlite'),

env es el archivo donde esta la conexion y liego el tipo de base de datos

env esta en la raiz del proyecto en la variable DB_CONNECTION

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=blog
DB_USERNAME=omgchyah
DB_PASSWORD=Yur1.12345

Luego en terminal
php artisan migrate

9. Migraciones desde folder database/migrations

Método up hace la migració
php artisan migrate

Método down deshace los cambios
php artisan migrate:rollback

En la tabla migrations, lleva un registro de migraciones

crear una tabla
php artisan make:migration 'nombre de tabla'

php artisan make:migration create_categories_table

Le decimos a Laravel que queremos crear una tabla de nombre categories

Luego de crear la table, escribimos el comando
php artisan migrate

php artisan migrate:refresh
Ejecuta los métodos down de todas las migraciones

y luego ejecuta las migraciones de nuevo 

php artisan migrate:fresh

No me ejecuta los métodos down, sino que elimina todas las tablas

Las crea nuevamente desde cero

Si todas las tablas son con migraciones, se puede usar refresh o fresh

Si las tablas se crean manualmente en phpadmin, mejor usar migrate:refresh, no borra las tablas escritas manualmente

Rollback es un método destructivo

Cuando queramos modificar una tabla con registros y querramos modificar la tabla

php artisan make:migration add_avatar_to_users_table

Se crea un php nueva y allí agregar la columna nueva para el método up and down

Usar ->after para elegir orden en la table

Cada vez que se modifica una tabla, agregar la columna nullable para que no dé error

10. Eloquent
Laravel tiene un ORM para no escribir una sentencia query de SQL
Mapeo - objeto - relacional

Para trabajar con eloquent, creamos los modelos

Crear modelo con php artisan make:model NombreModelo

Conectar desde archivo routes/web.php
Creando la ruta

->save
Class::all()
Class::find()
Class::where
Class::orderBy

En el modelo hay que decir con que tabla se trabajar

ESCRIBIR TODO EN INGLÉS

11. Mutadores y accesores, setters y getters

Desde el formulario, el usuario puede escribir de diferentes maneras
Para unificar la grafia, usamos mutadores

Se usa un método protected

Illuminate\Database\Eloquent\Casts\Attribute;

    protected function title(): Attribute
    {
        return Attribute::make(
            set: function($value){
                return strtolower($value);
            }
        );
    }

12.Casting

    //return $post->published_at->format('d/m/Y');

    return dd($post->is_active);

Custom casts

Lo convierte a la forma de almacenar y mostrar

13. Seeders
Tener cierta cantidad de posts y registros
Que haya un usuario creado sin importar la migracion

En el archivo database/seedersDatabaseSeeder.php

php artisan db:seed

Se puede crear archivos seeders aparte cuando hay mayor cantidad de datos

php artisan make:seeder UserSeeder

Creas tus seeders separados para cada objeto y desde el DatabaseSeeder se usa la funcion call 

        $this->call([
            UserSeeder::class,
            PostSeeder::class,
        ]);

php artisan migrate:fresh --seed

14. Factories

A menudo se usa en conjunto con los seeders para crear registros

En el archivo database/factories/UserFactory.php

Usa libreria fakerphp.com

Llevan el nombre del modelo que lo va a utilizar y la terminacion Factory

Para usarlos hay que ir al DatabaseSeeder

php artisan migrate:fresh --seed

Para crear nuestro propio factory

php artisan make:factory PostFactory